// Code generated by go-swagger; DO NOT EDIT.

package account_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/GoDieNow/TFT_Code/services/creditsystem/models"
)

// DisableAccountOKCode is the HTTP code returned for type DisableAccountOK
const DisableAccountOKCode int = 200

/*DisableAccountOK Status information of the account with provided id in the system after the operation succeded

swagger:response disableAccountOK
*/
type DisableAccountOK struct {

	/*
	  In: Body
	*/
	Payload *models.AccountStatus `json:"body,omitempty"`
}

// NewDisableAccountOK creates DisableAccountOK with default headers values
func NewDisableAccountOK() *DisableAccountOK {

	return &DisableAccountOK{}
}

// WithPayload adds the payload to the disable account o k response
func (o *DisableAccountOK) WithPayload(payload *models.AccountStatus) *DisableAccountOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable account o k response
func (o *DisableAccountOK) SetPayload(payload *models.AccountStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableAccountOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DisableAccountNotFoundCode is the HTTP code returned for type DisableAccountNotFound
const DisableAccountNotFoundCode int = 404

/*DisableAccountNotFound The account with the id provided doesn't exist

swagger:response disableAccountNotFound
*/
type DisableAccountNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDisableAccountNotFound creates DisableAccountNotFound with default headers values
func NewDisableAccountNotFound() *DisableAccountNotFound {

	return &DisableAccountNotFound{}
}

// WithPayload adds the payload to the disable account not found response
func (o *DisableAccountNotFound) WithPayload(payload *models.ErrorResponse) *DisableAccountNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable account not found response
func (o *DisableAccountNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableAccountNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DisableAccountInternalServerErrorCode is the HTTP code returned for type DisableAccountInternalServerError
const DisableAccountInternalServerErrorCode int = 500

/*DisableAccountInternalServerError Something unexpected happend, error raised

swagger:response disableAccountInternalServerError
*/
type DisableAccountInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDisableAccountInternalServerError creates DisableAccountInternalServerError with default headers values
func NewDisableAccountInternalServerError() *DisableAccountInternalServerError {

	return &DisableAccountInternalServerError{}
}

// WithPayload adds the payload to the disable account internal server error response
func (o *DisableAccountInternalServerError) WithPayload(payload *models.ErrorResponse) *DisableAccountInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the disable account internal server error response
func (o *DisableAccountInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DisableAccountInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
