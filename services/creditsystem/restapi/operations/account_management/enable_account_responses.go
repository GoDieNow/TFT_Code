// Code generated by go-swagger; DO NOT EDIT.

package account_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/GoDieNow/TFT_Code/services/creditsystem/models"
)

// EnableAccountOKCode is the HTTP code returned for type EnableAccountOK
const EnableAccountOKCode int = 200

/*EnableAccountOK Status information of the account with provided id in the system after the operation succeded

swagger:response enableAccountOK
*/
type EnableAccountOK struct {

	/*
	  In: Body
	*/
	Payload *models.AccountStatus `json:"body,omitempty"`
}

// NewEnableAccountOK creates EnableAccountOK with default headers values
func NewEnableAccountOK() *EnableAccountOK {

	return &EnableAccountOK{}
}

// WithPayload adds the payload to the enable account o k response
func (o *EnableAccountOK) WithPayload(payload *models.AccountStatus) *EnableAccountOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enable account o k response
func (o *EnableAccountOK) SetPayload(payload *models.AccountStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnableAccountOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EnableAccountNotFoundCode is the HTTP code returned for type EnableAccountNotFound
const EnableAccountNotFoundCode int = 404

/*EnableAccountNotFound The account with the id provided doesn't exist

swagger:response enableAccountNotFound
*/
type EnableAccountNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewEnableAccountNotFound creates EnableAccountNotFound with default headers values
func NewEnableAccountNotFound() *EnableAccountNotFound {

	return &EnableAccountNotFound{}
}

// WithPayload adds the payload to the enable account not found response
func (o *EnableAccountNotFound) WithPayload(payload *models.ErrorResponse) *EnableAccountNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enable account not found response
func (o *EnableAccountNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnableAccountNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EnableAccountInternalServerErrorCode is the HTTP code returned for type EnableAccountInternalServerError
const EnableAccountInternalServerErrorCode int = 500

/*EnableAccountInternalServerError Something unexpected happend, error raised

swagger:response enableAccountInternalServerError
*/
type EnableAccountInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewEnableAccountInternalServerError creates EnableAccountInternalServerError with default headers values
func NewEnableAccountInternalServerError() *EnableAccountInternalServerError {

	return &EnableAccountInternalServerError{}
}

// WithPayload adds the payload to the enable account internal server error response
func (o *EnableAccountInternalServerError) WithPayload(payload *models.ErrorResponse) *EnableAccountInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enable account internal server error response
func (o *EnableAccountInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnableAccountInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
