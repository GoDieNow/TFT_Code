// Code generated by go-swagger; DO NOT EDIT.

package credit_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/GoDieNow/TFT_Code/services/creditsystem/models"
)

// IncreaseCreditOKCode is the HTTP code returned for type IncreaseCreditOK
const IncreaseCreditOKCode int = 200

/*IncreaseCreditOK Credit status of the account with the provided id

swagger:response increaseCreditOK
*/
type IncreaseCreditOK struct {

	/*
	  In: Body
	*/
	Payload *models.CreditStatus `json:"body,omitempty"`
}

// NewIncreaseCreditOK creates IncreaseCreditOK with default headers values
func NewIncreaseCreditOK() *IncreaseCreditOK {

	return &IncreaseCreditOK{}
}

// WithPayload adds the payload to the increase credit o k response
func (o *IncreaseCreditOK) WithPayload(payload *models.CreditStatus) *IncreaseCreditOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the increase credit o k response
func (o *IncreaseCreditOK) SetPayload(payload *models.CreditStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *IncreaseCreditOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// IncreaseCreditNotFoundCode is the HTTP code returned for type IncreaseCreditNotFound
const IncreaseCreditNotFoundCode int = 404

/*IncreaseCreditNotFound The account with the id provided doesn't exist

swagger:response increaseCreditNotFound
*/
type IncreaseCreditNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewIncreaseCreditNotFound creates IncreaseCreditNotFound with default headers values
func NewIncreaseCreditNotFound() *IncreaseCreditNotFound {

	return &IncreaseCreditNotFound{}
}

// WithPayload adds the payload to the increase credit not found response
func (o *IncreaseCreditNotFound) WithPayload(payload *models.ErrorResponse) *IncreaseCreditNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the increase credit not found response
func (o *IncreaseCreditNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *IncreaseCreditNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// IncreaseCreditInternalServerErrorCode is the HTTP code returned for type IncreaseCreditInternalServerError
const IncreaseCreditInternalServerErrorCode int = 500

/*IncreaseCreditInternalServerError Something unexpected happend, error raised

swagger:response increaseCreditInternalServerError
*/
type IncreaseCreditInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewIncreaseCreditInternalServerError creates IncreaseCreditInternalServerError with default headers values
func NewIncreaseCreditInternalServerError() *IncreaseCreditInternalServerError {

	return &IncreaseCreditInternalServerError{}
}

// WithPayload adds the payload to the increase credit internal server error response
func (o *IncreaseCreditInternalServerError) WithPayload(payload *models.ErrorResponse) *IncreaseCreditInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the increase credit internal server error response
func (o *IncreaseCreditInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *IncreaseCreditInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
