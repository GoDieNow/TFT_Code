// Code generated by go-swagger; DO NOT EDIT.

package account_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/GoDieNow/TFT_Code/services/creditsystem/models"
)

// GetAccountStatusReader is a Reader for the GetAccountStatus structure.
type GetAccountStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAccountStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAccountStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAccountStatusOK creates a GetAccountStatusOK with default headers values
func NewGetAccountStatusOK() *GetAccountStatusOK {
	return &GetAccountStatusOK{}
}

/*GetAccountStatusOK handles this case with default header values.

Status information of the account with provided id in the system
*/
type GetAccountStatusOK struct {
	Payload *models.AccountStatus
}

func (o *GetAccountStatusOK) Error() string {
	return fmt.Sprintf("[GET /account/status/{id}][%d] getAccountStatusOK  %+v", 200, o.Payload)
}

func (o *GetAccountStatusOK) GetPayload() *models.AccountStatus {
	return o.Payload
}

func (o *GetAccountStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountStatusNotFound creates a GetAccountStatusNotFound with default headers values
func NewGetAccountStatusNotFound() *GetAccountStatusNotFound {
	return &GetAccountStatusNotFound{}
}

/*GetAccountStatusNotFound handles this case with default header values.

The account with the id provided doesn't exist
*/
type GetAccountStatusNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /account/status/{id}][%d] getAccountStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetAccountStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountStatusInternalServerError creates a GetAccountStatusInternalServerError with default headers values
func NewGetAccountStatusInternalServerError() *GetAccountStatusInternalServerError {
	return &GetAccountStatusInternalServerError{}
}

/*GetAccountStatusInternalServerError handles this case with default header values.

Something unexpected happend, error raised
*/
type GetAccountStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetAccountStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /account/status/{id}][%d] getAccountStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAccountStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetAccountStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
