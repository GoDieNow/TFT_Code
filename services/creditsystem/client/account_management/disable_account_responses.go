// Code generated by go-swagger; DO NOT EDIT.

package account_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/GoDieNow/TFT_Code/services/creditsystem/models"
)

// DisableAccountReader is a Reader for the DisableAccount structure.
type DisableAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisableAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisableAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewDisableAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDisableAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDisableAccountOK creates a DisableAccountOK with default headers values
func NewDisableAccountOK() *DisableAccountOK {
	return &DisableAccountOK{}
}

/*DisableAccountOK handles this case with default header values.

Status information of the account with provided id in the system after the operation succeded
*/
type DisableAccountOK struct {
	Payload *models.AccountStatus
}

func (o *DisableAccountOK) Error() string {
	return fmt.Sprintf("[POST /account/disable/{id}][%d] disableAccountOK  %+v", 200, o.Payload)
}

func (o *DisableAccountOK) GetPayload() *models.AccountStatus {
	return o.Payload
}

func (o *DisableAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AccountStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableAccountNotFound creates a DisableAccountNotFound with default headers values
func NewDisableAccountNotFound() *DisableAccountNotFound {
	return &DisableAccountNotFound{}
}

/*DisableAccountNotFound handles this case with default header values.

The account with the id provided doesn't exist
*/
type DisableAccountNotFound struct {
	Payload *models.ErrorResponse
}

func (o *DisableAccountNotFound) Error() string {
	return fmt.Sprintf("[POST /account/disable/{id}][%d] disableAccountNotFound  %+v", 404, o.Payload)
}

func (o *DisableAccountNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DisableAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableAccountInternalServerError creates a DisableAccountInternalServerError with default headers values
func NewDisableAccountInternalServerError() *DisableAccountInternalServerError {
	return &DisableAccountInternalServerError{}
}

/*DisableAccountInternalServerError handles this case with default header values.

Something unexpected happend, error raised
*/
type DisableAccountInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *DisableAccountInternalServerError) Error() string {
	return fmt.Sprintf("[POST /account/disable/{id}][%d] disableAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *DisableAccountInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DisableAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
