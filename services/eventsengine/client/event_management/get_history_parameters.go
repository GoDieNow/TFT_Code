// Code generated by go-swagger; DO NOT EDIT.

package event_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetHistoryParams creates a new GetHistoryParams object
// with the default values initialized.
func NewGetHistoryParams() *GetHistoryParams {
	var ()
	return &GetHistoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetHistoryParamsWithTimeout creates a new GetHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetHistoryParamsWithTimeout(timeout time.Duration) *GetHistoryParams {
	var ()
	return &GetHistoryParams{

		timeout: timeout,
	}
}

// NewGetHistoryParamsWithContext creates a new GetHistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetHistoryParamsWithContext(ctx context.Context) *GetHistoryParams {
	var ()
	return &GetHistoryParams{

		Context: ctx,
	}
}

// NewGetHistoryParamsWithHTTPClient creates a new GetHistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetHistoryParamsWithHTTPClient(client *http.Client) *GetHistoryParams {
	var ()
	return &GetHistoryParams{
		HTTPClient: client,
	}
}

/*GetHistoryParams contains all the parameters to send to the API endpoint
for the get history operation typically these are written to a http.Request
*/
type GetHistoryParams struct {

	/*Account
	  Id of the account to be checked

	*/
	Account string
	/*From
	  Datetime from which to get the usage report

	*/
	From *int64
	/*Region
	  Resource region to filter the usage

	*/
	Region *string
	/*Resource
	  Resource type to filter the usage

	*/
	Resource *string
	/*To
	  Datetime until which to get the usage report

	*/
	To *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get history params
func (o *GetHistoryParams) WithTimeout(timeout time.Duration) *GetHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get history params
func (o *GetHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get history params
func (o *GetHistoryParams) WithContext(ctx context.Context) *GetHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get history params
func (o *GetHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get history params
func (o *GetHistoryParams) WithHTTPClient(client *http.Client) *GetHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get history params
func (o *GetHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccount adds the account to the get history params
func (o *GetHistoryParams) WithAccount(account string) *GetHistoryParams {
	o.SetAccount(account)
	return o
}

// SetAccount adds the account to the get history params
func (o *GetHistoryParams) SetAccount(account string) {
	o.Account = account
}

// WithFrom adds the from to the get history params
func (o *GetHistoryParams) WithFrom(from *int64) *GetHistoryParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get history params
func (o *GetHistoryParams) SetFrom(from *int64) {
	o.From = from
}

// WithRegion adds the region to the get history params
func (o *GetHistoryParams) WithRegion(region *string) *GetHistoryParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the get history params
func (o *GetHistoryParams) SetRegion(region *string) {
	o.Region = region
}

// WithResource adds the resource to the get history params
func (o *GetHistoryParams) WithResource(resource *string) *GetHistoryParams {
	o.SetResource(resource)
	return o
}

// SetResource adds the resource to the get history params
func (o *GetHistoryParams) SetResource(resource *string) {
	o.Resource = resource
}

// WithTo adds the to to the get history params
func (o *GetHistoryParams) WithTo(to *int64) *GetHistoryParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get history params
func (o *GetHistoryParams) SetTo(to *int64) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param account
	if err := r.SetPathParam("account", o.Account); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	if o.Resource != nil {

		// query param resource
		var qrResource string
		if o.Resource != nil {
			qrResource = *o.Resource
		}
		qResource := qrResource
		if qResource != "" {
			if err := r.SetQueryParam("resource", qResource); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo int64
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := swag.FormatInt64(qrTo)
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
