// Code generated by go-swagger; DO NOT EDIT.

package bulk_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/GoDieNow/TFT_Code/services/billing/models"
)

// ReRunAllBillRunsAcceptedCode is the HTTP code returned for type ReRunAllBillRunsAccepted
const ReRunAllBillRunsAcceptedCode int = 202

/*ReRunAllBillRunsAccepted The request for processing had been added to the queue

swagger:response reRunAllBillRunsAccepted
*/
type ReRunAllBillRunsAccepted struct {

	/*
	  In: Body
	*/
	Payload *models.ItemCreatedResponse `json:"body,omitempty"`
}

// NewReRunAllBillRunsAccepted creates ReRunAllBillRunsAccepted with default headers values
func NewReRunAllBillRunsAccepted() *ReRunAllBillRunsAccepted {

	return &ReRunAllBillRunsAccepted{}
}

// WithPayload adds the payload to the re run all bill runs accepted response
func (o *ReRunAllBillRunsAccepted) WithPayload(payload *models.ItemCreatedResponse) *ReRunAllBillRunsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the re run all bill runs accepted response
func (o *ReRunAllBillRunsAccepted) SetPayload(payload *models.ItemCreatedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReRunAllBillRunsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReRunAllBillRunsNotFoundCode is the HTTP code returned for type ReRunAllBillRunsNotFound
const ReRunAllBillRunsNotFoundCode int = 404

/*ReRunAllBillRunsNotFound The invoice id provided doesn't exist

swagger:response reRunAllBillRunsNotFound
*/
type ReRunAllBillRunsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewReRunAllBillRunsNotFound creates ReRunAllBillRunsNotFound with default headers values
func NewReRunAllBillRunsNotFound() *ReRunAllBillRunsNotFound {

	return &ReRunAllBillRunsNotFound{}
}

// WithPayload adds the payload to the re run all bill runs not found response
func (o *ReRunAllBillRunsNotFound) WithPayload(payload *models.ErrorResponse) *ReRunAllBillRunsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the re run all bill runs not found response
func (o *ReRunAllBillRunsNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReRunAllBillRunsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReRunAllBillRunsInternalServerErrorCode is the HTTP code returned for type ReRunAllBillRunsInternalServerError
const ReRunAllBillRunsInternalServerErrorCode int = 500

/*ReRunAllBillRunsInternalServerError Something unexpected happend, error raised

swagger:response reRunAllBillRunsInternalServerError
*/
type ReRunAllBillRunsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewReRunAllBillRunsInternalServerError creates ReRunAllBillRunsInternalServerError with default headers values
func NewReRunAllBillRunsInternalServerError() *ReRunAllBillRunsInternalServerError {

	return &ReRunAllBillRunsInternalServerError{}
}

// WithPayload adds the payload to the re run all bill runs internal server error response
func (o *ReRunAllBillRunsInternalServerError) WithPayload(payload *models.ErrorResponse) *ReRunAllBillRunsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the re run all bill runs internal server error response
func (o *ReRunAllBillRunsInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReRunAllBillRunsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
