// Code generated by go-swagger; DO NOT EDIT.

package invoice_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGenerateInvoiceForCustomerParams creates a new GenerateInvoiceForCustomerParams object
// with the default values initialized.
func NewGenerateInvoiceForCustomerParams() *GenerateInvoiceForCustomerParams {
	var ()
	return &GenerateInvoiceForCustomerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGenerateInvoiceForCustomerParamsWithTimeout creates a new GenerateInvoiceForCustomerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGenerateInvoiceForCustomerParamsWithTimeout(timeout time.Duration) *GenerateInvoiceForCustomerParams {
	var ()
	return &GenerateInvoiceForCustomerParams{

		timeout: timeout,
	}
}

// NewGenerateInvoiceForCustomerParamsWithContext creates a new GenerateInvoiceForCustomerParams object
// with the default values initialized, and the ability to set a context for a request
func NewGenerateInvoiceForCustomerParamsWithContext(ctx context.Context) *GenerateInvoiceForCustomerParams {
	var ()
	return &GenerateInvoiceForCustomerParams{

		Context: ctx,
	}
}

// NewGenerateInvoiceForCustomerParamsWithHTTPClient creates a new GenerateInvoiceForCustomerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGenerateInvoiceForCustomerParamsWithHTTPClient(client *http.Client) *GenerateInvoiceForCustomerParams {
	var ()
	return &GenerateInvoiceForCustomerParams{
		HTTPClient: client,
	}
}

/*GenerateInvoiceForCustomerParams contains all the parameters to send to the API endpoint
for the generate invoice for customer operation typically these are written to a http.Request
*/
type GenerateInvoiceForCustomerParams struct {

	/*From
	  Datetime from which to generate the invoice

	*/
	From *strfmt.DateTime
	/*ID
	  Id of the account to be checked

	*/
	ID string
	/*To
	  Datetime until which to generate the invoice

	*/
	To *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) WithTimeout(timeout time.Duration) *GenerateInvoiceForCustomerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) WithContext(ctx context.Context) *GenerateInvoiceForCustomerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) WithHTTPClient(client *http.Client) *GenerateInvoiceForCustomerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) WithFrom(from *strfmt.DateTime) *GenerateInvoiceForCustomerParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithID adds the id to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) WithID(id string) *GenerateInvoiceForCustomerParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) SetID(id string) {
	o.ID = id
}

// WithTo adds the to to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) WithTo(to *strfmt.DateTime) *GenerateInvoiceForCustomerParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the generate invoice for customer params
func (o *GenerateInvoiceForCustomerParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GenerateInvoiceForCustomerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom strfmt.DateTime
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.DateTime
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
