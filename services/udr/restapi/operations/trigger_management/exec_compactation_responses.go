// Code generated by go-swagger; DO NOT EDIT.

package trigger_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/GoDieNow/TFT_Code/services/udr/models"
)

// ExecCompactationOKCode is the HTTP code returned for type ExecCompactationOK
const ExecCompactationOKCode int = 200

/*ExecCompactationOK Compactation task executed successfully.

swagger:response execCompactationOK
*/
type ExecCompactationOK struct {
}

// NewExecCompactationOK creates ExecCompactationOK with default headers values
func NewExecCompactationOK() *ExecCompactationOK {

	return &ExecCompactationOK{}
}

// WriteResponse to the client
func (o *ExecCompactationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// ExecCompactationInternalServerErrorCode is the HTTP code returned for type ExecCompactationInternalServerError
const ExecCompactationInternalServerErrorCode int = 500

/*ExecCompactationInternalServerError Something unexpected happend, error raised

swagger:response execCompactationInternalServerError
*/
type ExecCompactationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewExecCompactationInternalServerError creates ExecCompactationInternalServerError with default headers values
func NewExecCompactationInternalServerError() *ExecCompactationInternalServerError {

	return &ExecCompactationInternalServerError{}
}

// WithPayload adds the payload to the exec compactation internal server error response
func (o *ExecCompactationInternalServerError) WithPayload(payload *models.ErrorResponse) *ExecCompactationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the exec compactation internal server error response
func (o *ExecCompactationInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExecCompactationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
