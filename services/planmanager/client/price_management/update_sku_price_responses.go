// Code generated by go-swagger; DO NOT EDIT.

package price_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/GoDieNow/TFT_Code/services/planmanager/models"
)

// UpdateSkuPriceReader is a Reader for the UpdateSkuPrice structure.
type UpdateSkuPriceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSkuPriceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSkuPriceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateSkuPriceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSkuPriceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSkuPriceOK creates a UpdateSkuPriceOK with default headers values
func NewUpdateSkuPriceOK() *UpdateSkuPriceOK {
	return &UpdateSkuPriceOK{}
}

/*UpdateSkuPriceOK handles this case with default header values.

updated sku price
*/
type UpdateSkuPriceOK struct {
	Payload *models.SkuPrice
}

func (o *UpdateSkuPriceOK) Error() string {
	return fmt.Sprintf("[PUT /sku/price/{id}][%d] updateSkuPriceOK  %+v", 200, o.Payload)
}

func (o *UpdateSkuPriceOK) GetPayload() *models.SkuPrice {
	return o.Payload
}

func (o *UpdateSkuPriceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SkuPrice)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSkuPriceNotFound creates a UpdateSkuPriceNotFound with default headers values
func NewUpdateSkuPriceNotFound() *UpdateSkuPriceNotFound {
	return &UpdateSkuPriceNotFound{}
}

/*UpdateSkuPriceNotFound handles this case with default header values.

sku price with skupriceid not found
*/
type UpdateSkuPriceNotFound struct {
	Payload *models.ErrorResponse
}

func (o *UpdateSkuPriceNotFound) Error() string {
	return fmt.Sprintf("[PUT /sku/price/{id}][%d] updateSkuPriceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSkuPriceNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateSkuPriceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSkuPriceInternalServerError creates a UpdateSkuPriceInternalServerError with default headers values
func NewUpdateSkuPriceInternalServerError() *UpdateSkuPriceInternalServerError {
	return &UpdateSkuPriceInternalServerError{}
}

/*UpdateSkuPriceInternalServerError handles this case with default header values.

unexpected error
*/
type UpdateSkuPriceInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *UpdateSkuPriceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /sku/price/{id}][%d] updateSkuPriceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSkuPriceInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UpdateSkuPriceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
