// Code generated by go-swagger; DO NOT EDIT.

package bundle_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/GoDieNow/TFT_Code/services/planmanager/models"
)

// GetSkuBundleByNameReader is a Reader for the GetSkuBundleByName structure.
type GetSkuBundleByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSkuBundleByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSkuBundleByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetSkuBundleByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSkuBundleByNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSkuBundleByNameOK creates a GetSkuBundleByNameOK with default headers values
func NewGetSkuBundleByNameOK() *GetSkuBundleByNameOK {
	return &GetSkuBundleByNameOK{}
}

/*GetSkuBundleByNameOK handles this case with default header values.

sku bundle returned
*/
type GetSkuBundleByNameOK struct {
	Payload *models.SkuBundle
}

func (o *GetSkuBundleByNameOK) Error() string {
	return fmt.Sprintf("[GET /sku/bundle/name/{name}][%d] getSkuBundleByNameOK  %+v", 200, o.Payload)
}

func (o *GetSkuBundleByNameOK) GetPayload() *models.SkuBundle {
	return o.Payload
}

func (o *GetSkuBundleByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SkuBundle)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSkuBundleByNameNotFound creates a GetSkuBundleByNameNotFound with default headers values
func NewGetSkuBundleByNameNotFound() *GetSkuBundleByNameNotFound {
	return &GetSkuBundleByNameNotFound{}
}

/*GetSkuBundleByNameNotFound handles this case with default header values.

sku bundle with name not found
*/
type GetSkuBundleByNameNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetSkuBundleByNameNotFound) Error() string {
	return fmt.Sprintf("[GET /sku/bundle/name/{name}][%d] getSkuBundleByNameNotFound  %+v", 404, o.Payload)
}

func (o *GetSkuBundleByNameNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetSkuBundleByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSkuBundleByNameInternalServerError creates a GetSkuBundleByNameInternalServerError with default headers values
func NewGetSkuBundleByNameInternalServerError() *GetSkuBundleByNameInternalServerError {
	return &GetSkuBundleByNameInternalServerError{}
}

/*GetSkuBundleByNameInternalServerError handles this case with default header values.

unexpected error
*/
type GetSkuBundleByNameInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetSkuBundleByNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sku/bundle/name/{name}][%d] getSkuBundleByNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSkuBundleByNameInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetSkuBundleByNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
