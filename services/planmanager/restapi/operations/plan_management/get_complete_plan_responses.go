// Code generated by go-swagger; DO NOT EDIT.

package plan_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/GoDieNow/TFT_Code/services/planmanager/models"
)

// GetCompletePlanOKCode is the HTTP code returned for type GetCompletePlanOK
const GetCompletePlanOKCode int = 200

/*GetCompletePlanOK plan returned

swagger:response getCompletePlanOK
*/
type GetCompletePlanOK struct {

	/*
	  In: Body
	*/
	Payload *models.Plan `json:"body,omitempty"`
}

// NewGetCompletePlanOK creates GetCompletePlanOK with default headers values
func NewGetCompletePlanOK() *GetCompletePlanOK {

	return &GetCompletePlanOK{}
}

// WithPayload adds the payload to the get complete plan o k response
func (o *GetCompletePlanOK) WithPayload(payload *models.Plan) *GetCompletePlanOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get complete plan o k response
func (o *GetCompletePlanOK) SetPayload(payload *models.Plan) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCompletePlanOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCompletePlanNotFoundCode is the HTTP code returned for type GetCompletePlanNotFound
const GetCompletePlanNotFoundCode int = 404

/*GetCompletePlanNotFound complete plan with planid not found

swagger:response getCompletePlanNotFound
*/
type GetCompletePlanNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetCompletePlanNotFound creates GetCompletePlanNotFound with default headers values
func NewGetCompletePlanNotFound() *GetCompletePlanNotFound {

	return &GetCompletePlanNotFound{}
}

// WithPayload adds the payload to the get complete plan not found response
func (o *GetCompletePlanNotFound) WithPayload(payload *models.ErrorResponse) *GetCompletePlanNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get complete plan not found response
func (o *GetCompletePlanNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCompletePlanNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCompletePlanInternalServerErrorCode is the HTTP code returned for type GetCompletePlanInternalServerError
const GetCompletePlanInternalServerErrorCode int = 500

/*GetCompletePlanInternalServerError unexpected error

swagger:response getCompletePlanInternalServerError
*/
type GetCompletePlanInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetCompletePlanInternalServerError creates GetCompletePlanInternalServerError with default headers values
func NewGetCompletePlanInternalServerError() *GetCompletePlanInternalServerError {

	return &GetCompletePlanInternalServerError{}
}

// WithPayload adds the payload to the get complete plan internal server error response
func (o *GetCompletePlanInternalServerError) WithPayload(payload *models.ErrorResponse) *GetCompletePlanInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get complete plan internal server error response
func (o *GetCompletePlanInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCompletePlanInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
