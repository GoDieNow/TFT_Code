// Code generated by go-swagger; DO NOT EDIT.

package plan_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPlanHandlerFunc turns a function with the right signature into a get plan handler
type GetPlanHandlerFunc func(GetPlanParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPlanHandlerFunc) Handle(params GetPlanParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetPlanHandler interface for that can handle valid get plan params
type GetPlanHandler interface {
	Handle(GetPlanParams, interface{}) middleware.Responder
}

// NewGetPlan creates a new http.Handler for the get plan operation
func NewGetPlan(ctx *middleware.Context, handler GetPlanHandler) *GetPlan {
	return &GetPlan{Context: ctx, Handler: handler}
}

/*GetPlan swagger:route GET /plan/{id} planManagement getPlan

Get specific plan

get plan with given planid

*/
type GetPlan struct {
	Context *middleware.Context
	Handler GetPlanHandler
}

func (o *GetPlan) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPlanParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
