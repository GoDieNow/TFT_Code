// Code generated by go-swagger; DO NOT EDIT.

package bundle_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/GoDieNow/TFT_Code/services/planmanager/models"
)

// GetSkuBundleByNameOKCode is the HTTP code returned for type GetSkuBundleByNameOK
const GetSkuBundleByNameOKCode int = 200

/*GetSkuBundleByNameOK sku bundle returned

swagger:response getSkuBundleByNameOK
*/
type GetSkuBundleByNameOK struct {

	/*
	  In: Body
	*/
	Payload *models.SkuBundle `json:"body,omitempty"`
}

// NewGetSkuBundleByNameOK creates GetSkuBundleByNameOK with default headers values
func NewGetSkuBundleByNameOK() *GetSkuBundleByNameOK {

	return &GetSkuBundleByNameOK{}
}

// WithPayload adds the payload to the get sku bundle by name o k response
func (o *GetSkuBundleByNameOK) WithPayload(payload *models.SkuBundle) *GetSkuBundleByNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sku bundle by name o k response
func (o *GetSkuBundleByNameOK) SetPayload(payload *models.SkuBundle) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSkuBundleByNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSkuBundleByNameNotFoundCode is the HTTP code returned for type GetSkuBundleByNameNotFound
const GetSkuBundleByNameNotFoundCode int = 404

/*GetSkuBundleByNameNotFound sku bundle with name not found

swagger:response getSkuBundleByNameNotFound
*/
type GetSkuBundleByNameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSkuBundleByNameNotFound creates GetSkuBundleByNameNotFound with default headers values
func NewGetSkuBundleByNameNotFound() *GetSkuBundleByNameNotFound {

	return &GetSkuBundleByNameNotFound{}
}

// WithPayload adds the payload to the get sku bundle by name not found response
func (o *GetSkuBundleByNameNotFound) WithPayload(payload *models.ErrorResponse) *GetSkuBundleByNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sku bundle by name not found response
func (o *GetSkuBundleByNameNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSkuBundleByNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSkuBundleByNameInternalServerErrorCode is the HTTP code returned for type GetSkuBundleByNameInternalServerError
const GetSkuBundleByNameInternalServerErrorCode int = 500

/*GetSkuBundleByNameInternalServerError unexpected error

swagger:response getSkuBundleByNameInternalServerError
*/
type GetSkuBundleByNameInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSkuBundleByNameInternalServerError creates GetSkuBundleByNameInternalServerError with default headers values
func NewGetSkuBundleByNameInternalServerError() *GetSkuBundleByNameInternalServerError {

	return &GetSkuBundleByNameInternalServerError{}
}

// WithPayload adds the payload to the get sku bundle by name internal server error response
func (o *GetSkuBundleByNameInternalServerError) WithPayload(payload *models.ErrorResponse) *GetSkuBundleByNameInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sku bundle by name internal server error response
func (o *GetSkuBundleByNameInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSkuBundleByNameInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
